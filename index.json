{"project": "Scipp Neutron", "project_url": "https://scipp.github.io/scippneutron/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"11": "b3d8756468337620a91664785c78e96faa5e1cb8", "332": "98c61150501715372250a4f7c46b79da87f356b2", "400": "b5557cc95e4c1525f6322616cc840c0de653b35b", "586": "a87ba5aeff458ff5f99c73dadacbc8887bc79d98", "666": "d99a2f3f75c4a953b1632566a77769d2bba0d841", "690": "9b1dd0dcb061e83e634df1fb4f35e8265487525a", "727": "8b01a5d7a702d3c609f96e6bfdefe95fa4c0c2ca", "1218": "ac4782961b51cee8022e6b2165bcef7848a799f1", "1232": "3c0ef370b5ba7639e214160dcf27dc6fed7309da", "1417": "1ae74e77e447b6de05f33b84f44e9f7a1713525c", "1423": "809229b2461c5bf0e2313554fa22d17d6304a2ab", "1430": "9b58501b5902732511dca809ebe04b0da1061622", "1433": "6cdafc42e9f876adc14efa754cf21dc707fa87de"}, "revision_to_date": {"11": 1603732416000, "332": 1616671288000, "400": 1619065573000, "586": 1622184807000, "666": 1622706147000, "690": 1623212991000, "727": 1623920019000, "1218": 1632483669000, "1232": 1632819170000, "1417": 1634888285000, "1423": 1635148563000, "1430": 1635165988000, "1433": 1635311095000}, "params": {"cpu": ["2 Core CPU"], "machine": ["cloud-container"], "os": ["Ubuntu latest"], "ram": ["7GB"], "python": ["3.9"], "appdirs": [""], "cmake": [""], "conan": [""], "ess-dmsc::ess-streaming-data-types": [""], "h5py": [""], "ipykernel": ["6.3.1"], "ipympl": [""], "ipywidgets": [""], "mantid-framework": [""], "matplotlib-base": [""], "ninja": [""], "numpy": [""], "pip": [""], "pooch": [""], "python-configuration": [""], "python-confluent-kafka": [""], "pythreejs": [""], "pyyaml": [""], "scipp::scipp": [""], "scipy": [""], "tbb": [""], "branch": ["main"]}, "graph_param_list": [{"cpu": "2 Core CPU", "machine": "cloud-container", "os": "Ubuntu latest", "ram": "7GB", "python": "3.9", "appdirs": "", "cmake": "", "conan": "", "ess-dmsc::ess-streaming-data-types": "", "h5py": "", "ipykernel": "6.3.1", "ipympl": "", "ipywidgets": "", "mantid-framework": "", "matplotlib-base": "", "ninja": "", "numpy": "", "pip": "", "pooch": "", "python-configuration": "", "python-confluent-kafka": "", "pythreejs": "", "pyyaml": "", "scipp::scipp": "", "scipy": "", "tbb": "", "branch": "main"}], "benchmarks": {"load_nexus.LoadNexus.time_load_event_nexus": {"code": "class LoadNexus:\n    def time_load_event_nexus(self):\n        scn.load_nexus(self.file_path)\n\n    def setup(self):\n        self.file_path = scn.data.get_path('PG3_4844_event.nxs')", "min_run_count": 2, "name": "load_nexus.LoadNexus.time_load_event_nexus", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9bb61e37c240f4221eff71f827efb0f1cfb5371f7c6b0e72f79b9ca92578e5e9", "warmup_time": -1}, "transform_coords.TransformCoords.time_energy_to_tof": {"code": "class TransformCoords:\n    def time_energy_to_tof(self):\n        scn.convert(self.var_energy, \"energy\", \"tof\", False)\n\n    def setup(self):\n        da = scn.load(scn.data.get_path('PG3_4844_event.nxs'))\n        self.var_tof = da\n        self.var_wavelength = scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n        self.var_energy = scn.convert(self.var_tof, \"tof\", \"energy\", False)", "min_run_count": 2, "name": "transform_coords.TransformCoords.time_energy_to_tof", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f1ea8beffb41e75997f96056160ef6dd12d9afb53546d00f7e0cb2b307a616bb", "warmup_time": -1}, "transform_coords.TransformCoords.time_tof_to_dspacing": {"code": "class TransformCoords:\n    def time_tof_to_dspacing(self):\n        scn.convert(self.var_tof, \"tof\", \"dspacing\", True)\n\n    def setup(self):\n        da = scn.load(scn.data.get_path('PG3_4844_event.nxs'))\n        self.var_tof = da\n        self.var_wavelength = scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n        self.var_energy = scn.convert(self.var_tof, \"tof\", \"energy\", False)", "min_run_count": 2, "name": "transform_coords.TransformCoords.time_tof_to_dspacing", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "76d3e8bdf45621127e026f90298e8f292d01ddb57cb7caf05a5ce555a659d8ac", "warmup_time": -1}, "transform_coords.TransformCoords.time_tof_to_energy": {"code": "class TransformCoords:\n    def time_tof_to_energy(self):\n        scn.convert(self.var_tof, \"tof\", \"energy\", False)\n\n    def setup(self):\n        da = scn.load(scn.data.get_path('PG3_4844_event.nxs'))\n        self.var_tof = da\n        self.var_wavelength = scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n        self.var_energy = scn.convert(self.var_tof, \"tof\", \"energy\", False)", "min_run_count": 2, "name": "transform_coords.TransformCoords.time_tof_to_energy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "32774381c7e0285d159959187b4537339285cc2573292bc6b39f5edd04d4bc0b", "warmup_time": -1}, "transform_coords.TransformCoords.time_tof_to_wavelength": {"code": "class TransformCoords:\n    def time_tof_to_wavelength(self):\n        scn.convert(self.var_wavelength, \"wavelength\", \"tof\", False)\n\n    def setup(self):\n        da = scn.load(scn.data.get_path('PG3_4844_event.nxs'))\n        self.var_tof = da\n        self.var_wavelength = scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n        self.var_energy = scn.convert(self.var_tof, \"tof\", \"energy\", False)", "min_run_count": 2, "name": "transform_coords.TransformCoords.time_tof_to_wavelength", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "46879c3a68b31604accd5a00f4187eb567d166242d70d944aa010a5d6f8de380", "warmup_time": -1}, "transform_coords.TransformCoords.time_wavelength_to_tof": {"code": "class TransformCoords:\n    def time_wavelength_to_tof(self):\n        scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n\n    def setup(self):\n        da = scn.load(scn.data.get_path('PG3_4844_event.nxs'))\n        self.var_tof = da\n        self.var_wavelength = scn.convert(self.var_tof, \"tof\", \"wavelength\", False)\n        self.var_energy = scn.convert(self.var_tof, \"tof\", \"energy\", False)", "min_run_count": 2, "name": "transform_coords.TransformCoords.time_wavelength_to_tof", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d4710ab73daad9eb187b2c50c320802720ae09b880a656f3ac5284d75fea178b", "warmup_time": -1}}, "machines": {"cloud-container": {"cpu": "2 Core CPU", "machine": "cloud-container", "os": "Ubuntu latest", "ram": "7GB", "version": 1}}, "tags": {"0.0.1": 11, "0.1.0": 332, "0.1.1": 400, "0.1.2": 586, "0.2.0": 666, "0.2.1": 690, "0.2.2": 727, "0.3.0": 1218, "0.3.1": 1232, "0.4.0": 1417}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}